#!/bin/bash
#declare -A filenames

export LC_ALL=C

is_uint() {
  case $1 in
    ''|*[!0-9]*)
      return 1
      ;;
  esac
}

print_help() {
  echo "Usage: body [-A <lines_after>] [-B <lines_before>] [-C <lines_before_and_after>] [--color=WHEN] [-n] [-N] <filename(s)>"
  echo "
  Context control:
    -A NUM   print NUM lines of trailing context
    -B NUM   print NUM lines of leading context
    -C NUM   print NUM lines of output context

    --color=WHEN   use markers to highlight the matching strings;
                   WHEN is 'always', 'never', or 'auto'

  Output control:
    -n       do not print line number with output lines
    -N       do not print file name with output lines
  "
}

if [ "$#" -lt 1 ]; then
  print_help
  exit 1
fi

no_files=0
no_lines=0
def_lines_before=0
def_lines_after=0

use_color=false
COLOR_MODE="auto"
COLOR_FILENAME=""
COLOR_LINE=""
COLOR_SEP=""
COLOR_RESET=""

while [ "$#" -gt 0 ]; do
  case $1 in
    --help*)
      print_help
      exit 0
      ;;
    --color*)
      COLOR_MODE="${1#--color}"
      COLOR_MODE="${COLOR_MODE#=}"
      if [ -z "$COLOR_MODE" ] && [ -n "$2" ]; then
        COLOR_MODE="$2"
        shift
      fi

      if [[ ! "$COLOR_MODE" =~ ^(auto|always|never)$ ]]; then
        echo "body: $COLOR_MODE: invalid color mode" >&2
        exit 1
      fi
      ;;
    -A*)
      lines_after="${1#-A}"
      lines_after="${lines_after#=}"
      if [ -z "$lines_after" ] && [ -n "$2" ]; then
        lines_after="$2"
        shift
      fi

      if ! is_uint "$lines_after"; then
        echo "body: $lines_after: invalid context length argument" >&2
        exit 1
      fi
      ;;
    -B*)
      lines_before="${1#-B}"
      lines_before="${lines_before#=}"
      if [ -z "$lines_before" ] && [ -n "$2" ]; then
        lines_before="$2"
        shift
      fi
      if ! is_uint "$lines_before"; then
        echo "body: $lines_before: invalid context length argument" >&2
        exit 1
      fi

      ;;
    -C*)
      lines_before="${1#-C}"
      lines_before="${lines_before#=}"
      if [ -z "$lines_before" ] && [ -n "$2" ]; then
        lines_before="$2"
        shift
      fi
      lines_after="$lines_before"
      if ! is_uint "$lines_after"; then
        echo "body: $lines_after: invalid context length argument" >&2
        exit 1
      fi
      ;;
    -n)
      no_lines=1
      ;;
    -N)
      no_files=1
      ;;
    *)
      if [[ ! "$1" =~ ^-.* ]]; then
        filenames+=("$1") #"$(readlink -f -- "$1")") #["$1"]=1
      else
        echo "body: invalid option -- '$1'" >&2
        exit 1
      fi
      ;;
  esac
  shift
done

case "$COLOR_MODE" in
  always) use_color=true;;
  never)  use_color=false;;
  auto) [[ -t 1 ]] && use_color=true;;
esac

if $use_color; then
  COLOR_FILENAME=$'\E[35m'
  COLOR_LINE=$'\E[32m'
  COLOR_SEP=$'\E[36m'
  COLOR_RESET=$'\E[0m'
fi

lines_before="${lines_before:-$def_lines_before}"
lines_after="${lines_after:-$def_lines_after}"

num_files="${#filenames[@]}"

if [ "$num_files" -eq 0 ]; then
  echo "No file(s) specified." >&2
  exit 1
fi

for filename in "${filenames[@]}"; do
  if ! [ -f "$filename" ] || ! [ -r "$filename" ]; then
    echo "body: $filename: No such file" >&2
    continue
  fi

  line_count=$(wc -l < "$filename" 2>/dev/null)

  if [ "$line_count" -lt 1 ]; then
#    echo "File is empty: $filename" >&2
    continue
  fi

  middle_line=$((line_count / 2)) # XXX: Rounds down

  start_line=$((middle_line - lines_before))
  end_line=$((middle_line + lines_after))

  [ "$start_line" -le 0 ] && start_line=1
  [ "$end_line" -gt $line_count ] && end_line=$line_count

  if [ "$no_lines" -eq 1 ]; then
    if [ "$no_files" -eq 1 ]; then
      [ "$num_files" -ne 1 ] && sed -n "$start_line,${end_line}p" "$filename" && continue
    else
      [ "$num_files" -ne 1 ] && sed -n "$start_line,${end_line}p" "$filename" | sed "s|^|${COLOR_FILENAME}${filename}${COLOR_RESET}${COLOR_SEP}:${COLOR_RESET}|" && continue
    fi
    sed -n "$start_line,${end_line}p" "$filename"
  else
    if [ "$no_files" -eq 1 ]; then
      [ "$num_files" -ne 1 ] && sed "$start_line,$end_line"'!d;=' "$filename" | sed "N;s/^\(.*\)\n\(.*\)/${COLOR_LINE}\1${COLOR_RESET}${COLOR_SEP}:${COLOR_RESET}\2/" && continue
    else
      [ "$num_files" -ne 1 ] && sed "$start_line,$end_line"'!d;=' "$filename" | sed "N;s/^\(.*\)\n\(.*\)/${COLOR_FILENAME}${filename}${COLOR_RESET}${COLOR_SEP}:${COLOR_RESET}${COLOR_LINE}\1${COLOR_RESET}${COLOR_SEP}:${COLOR_RESET}\2/" && continue
    fi

    sed "$start_line,$end_line"'!d;=' "$filename" | sed "N;s/^\(.*\)\n\(.*\)/${COLOR_LINE}\1${COLOR_RESET}${COLOR_SEP}:${COLOR_RESET}\2/"
  fi
done
